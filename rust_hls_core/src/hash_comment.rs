//! Hash comments are used to mark rust files generated by rust_hls and to track whether the source has changed

use regex::Regex;
use thiserror::Error;

/// Any source file containing a comment in this format is managed by rust_hls
///
/// The hash must not contain `"`
///
/// `hash_regex` can be used to check if a file contains a hash comment
pub fn hash_comment(hash: &str) -> String {
    format!("// rust_hls hash: \"{}\"", hash)
}

/// Use this regex to check if a file is managed by rust_hls
pub fn hash_comment_regex() -> Regex {
    let regex = Regex::new(r#"(?m)^[\s]*// rust_hls hash: "([^"]*)"[\s]*$"#).unwrap();
    return regex;
}

#[derive(Error, Debug)]
pub enum ExtractHashError {
    #[error(
        "Failed to find a rust_hls hash in an existing output file. Maybe it was modified by hand?"
    )]
    FailedToFindHashInExistingFile,
}

/// Extracts the hash from the hash comment in a file
pub fn extract_file_hash(content: &str) -> Result<String, ExtractHashError> {
    let regex = hash_comment_regex();
    let captures = regex
        .captures(content)
        .ok_or(ExtractHashError::FailedToFindHashInExistingFile)?;
    let hash = captures
        .get(1)
        .ok_or(ExtractHashError::FailedToFindHashInExistingFile)?;
    return Ok(hash.as_str().to_string());
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn extract_and_generate_hash_work_together() {
        let original_hash = "sdfsadkfjsjdklf823rfew";
        let generated_hash_comment = hash_comment(original_hash);

        assert!(generated_hash_comment.contains(original_hash));

        let extracted_hash = extract_file_hash(&generated_hash_comment).unwrap();

        assert_eq!(extracted_hash, original_hash);
    }

    #[test]
    fn extract_hash_regex_works() {
        let original_hash = "sdfsadkfjsjdklf823rfew";
        let generated_hash_comment = hash_comment(original_hash);

        let file = format!(
            r##"
        stuff
        
{}

other stuff
        "##,
            generated_hash_comment
        );
        let extracted_hash = extract_file_hash(&file).unwrap();

        assert_eq!(extracted_hash, original_hash);
    }

    #[test]
    fn extract_hash_regex_works_with_leading_and_trailing_spaces() {
        let original_hash = "sdfsadkfjsjdklf823rfew";
        let generated_hash_comment = hash_comment(original_hash);

        let file = format!(
            r##"
        stuff
        
     {}            

other stuff
        "##,
            generated_hash_comment
        );
        let extracted_hash = extract_file_hash(&file).unwrap();

        assert_eq!(extracted_hash, original_hash);
    }
}
